{"remainingRequest":"/home/martin/Documents/github/final-project-group-0-/microservices/picasso/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/martin/Documents/github/final-project-group-0-/microservices/picasso/src/components/SwapForm.vue?vue&type=style&index=0&id=60c75da7&scoped=true&lang=css&","dependencies":[{"path":"/home/martin/Documents/github/final-project-group-0-/microservices/picasso/src/components/SwapForm.vue","mtime":1595541884109},{"path":"/home/martin/Documents/github/final-project-group-0-/microservices/picasso/node_modules/css-loader/dist/cjs.js","mtime":1595467781792},{"path":"/home/martin/Documents/github/final-project-group-0-/microservices/picasso/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1595467782512},{"path":"/home/martin/Documents/github/final-project-group-0-/microservices/picasso/node_modules/postcss-loader/src/index.js","mtime":1595467782164},{"path":"/home/martin/Documents/github/final-project-group-0-/microservices/picasso/node_modules/cache-loader/dist/cjs.js","mtime":1595467781660},{"path":"/home/martin/Documents/github/final-project-group-0-/microservices/picasso/node_modules/vue-loader/lib/index.js","mtime":1595467782512}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCiNhdXRoSWQgewogIGZvbnQtc2l6ZTogNDhweDsKICBhbGlnbi1zZWxmOiBjZW50ZXI7Cn0KCmRpdiB7CiAgd2lkdGg6IDQwMHB4OwogIGhlaWdodDogMzAwcHg7CiAgcGFkZGluZzogMzBweDsKICBkaXNwbGF5OiBmbGV4OwogIGZsZXgtZmxvdzogY29sdW1uOwogIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kOwogIGFsaWduLWl0ZW1zOiBzdHJldGNoOwp9CmgyIHsKICBmb250LXNpemU6IDI0cHg7CiAgcGFkZGluZzogMTBweDsKfQo="},{"version":3,"sources":["SwapForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkFA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SwapForm.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"card shadow-m\">\n    <h2 class=\"primary-text\" id=\"authId\">{{ swapProps.authId }}</h2>\n    <h2 class=\"primary-text\"><span class=\"title\">Domain: </span>{{ swapProps.domain }}</h2>\n    <h2 class=\"primary-text\"><span class=\"title\">Field-Id: </span>{{ swapProps.fieldId }}</h2>\n    <select v-model=\"selectedCred\" id=\"creds\">\n      <option v-for=\"cred in creds\" v-bind:value=\"cred\" :key=\"cred.id\">\n        {{cred.hint}}\n      </option>\n    </select>\n    <button @click=\"submitSwap\" class=\"button primary\">Submit</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"SwapForm\",\n  props: [\"swapProps\"],\n  data() {\n    return {\n      selectedCred: { hint: \"\", id: \"\" },\n      creds: \"\"\n    };\n  },\n  methods: {\n    submitSwap: function() {\n      this.$http\n        .request({\n          url: \"http://localhost:8000/swap\",\n          method: \"post\",\n          headers: this.$apiHeaders,\n          data: {\n            SwapId: this.swapProps.id,\n            PrivateKey: this.$privateKey,\n            CredentialId: this.selectedCred.id\n          }\n        })\n        .then(resp => {\n          if (resp.status == 200) {\n            this.$emit(\"submit\");\n          }\n        })\n        .catch ((err) => {\n        if (err.response.status == 401) {\n          this.$toast.error(\"Unauthorized\");\n        } else {\n          console.log(this.$PrivateKey);\n          this.$toast.error(err.response.data.title);\n        }\n      });\n    }\n  },\n  //right after creation, get possible credentials that can be used\n  created: function() {\n    this.$http\n      .request({\n        url: \"http://localhost:8000/credential\",\n        method: \"get\",\n        headers: this.$apiHeaders,\n        params: {\n          domain: this.swapProps.domain,\n          type: this.swapProps.type\n        }\n      })\n      .then(resp => {\n        if (resp.status == 200) {\n          this.creds = resp.data;\n        }\n      })      \n      .catch ((err) => {\n        if (err.response.status == 401) {\n          this.$toast.error(\"Unauthorized\");\n        } else {\n          this.$toast.error(err.response.data.title);\n        }\n      });\n  }\n};\n</script>\n\n<style scoped>\n\n#authId {\n  font-size: 48px;\n  align-self: center;\n}\n\ndiv {\n  width: 400px;\n  height: 300px;\n  padding: 30px;\n  display: flex;\n  flex-flow: column;\n  justify-content: space-around;\n  align-items: stretch;\n}\nh2 {\n  font-size: 24px;\n  padding: 10px;\n}\n</style>\n"]}]}